import json
import glob
from datetime import datetime
import aiohttp
import asyncio
import re
import hashlib

async def load_port_descriptions(url):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            text = await response.text()
            port_services = {}
            for line in text.splitlines():
                if line.strip() and not line.startswith('#'):
                    parts = line.split()
                    service_name = parts[0]
                    port_protocol = parts[1]
                    port, protocol = port_protocol.split('/')

                    if protocol.lower() == 'tcp' and service_name.lower() != 'unknown':
                        description = ''
                        if '#' in line:
                            description = line.split('#')[-1].strip()

                        protocol_match = re.search(r'(https?|HTTP[S]?)', description)
                        if protocol_match:
                            protocol = protocol_match.group().upper()

                        port_services[int(port)] = {  # Convert port to integer
                            "name": service_name,
                            "description": description,
                            "protocol": protocol if protocol in ["HTTP", "HTTPS"] else "TCP"
                        }
            return port_services

def load_data_from_files(file_pattern):
    all_data = []
    for file_name in glob.glob(file_pattern):
        with open(file_name, 'r') as file:
            data = json.load(file)
            all_data.extend(data)
    return all_data

def add_counts_and_date(data, port_descriptions):
    for port_data in data:
        port = int(port_data['port'])  # Convert port to integer
        port_desc = port_descriptions.get(port, {"name": "", "description": "", "protocol": "TCP"})
        port_data['count'] = len(port_data['vulnerabilities'])
        port_data['protocol'] = port_desc['protocol']
    return data

def add_missing_ports(data, port_descriptions, start_port=0, end_port=65535):

    existing_ports = [int(port_data['port']) for port_data in data]  # Convert port to integer
    
    for port in range(start_port, end_port + 1):
        if port not in existing_ports:  # Check for integer port in existing_ports
            port_desc = port_descriptions.get(port, {"name": "", "description": "", "protocol": "TCP"})
            if port_desc["name"] and port_desc["description"]:
                data.append({
                    "port": port,  # Keep port as an integer
                    "name": port_desc["name"],
                    "description": port_desc["description"],
                    "vulnerabilities": [],
                    "count": 0,
                    "protocol": port_desc["protocol"]
                })


    print(f"Added {len(data) - len(existing_ports)} missing ports")
    return data

def sort_by_port(data):
    sorted_ports = sorted(data, key=lambda x: int(x['port']), reverse=False)
    print(f"Sorted {len(sorted_ports)} ports")
    return sorted_ports

def save_to_file(data, filename):
    
    # Add headers and put the vulnerabilities in a list
    final_data = {
        "date": datetime.now().strftime("%B %dth %Y"),
        # Compute checksum on the data
        "signature": hashlib.sha256(json.dumps(data).encode('utf-8')).hexdigest(),
        "vulnerabilities": data
    }
    
    
    with open(filename, 'w') as file:
        json.dump(final_data, file, indent=4)

async def main():
    nmap_services_url = "https://svn.nmap.org/nmap/nmap-services"
    port_descriptions = await load_port_descriptions(nmap_services_url)
    print(f"Loaded {len(port_descriptions)} port descriptions")

    file_pattern = "lanscan_port_vulns_db_*.json"
    data = load_data_from_files(file_pattern)
    # Convert the port field to an integer
    for port_data in data:
        port_data['port'] = int(port_data['port'])
    print(f"Loaded {len(data)} port vulnerability data")
    updated_data = add_counts_and_date(data, port_descriptions)
    complete_data = add_missing_ports(updated_data, port_descriptions)
    sorted_data = sort_by_port(complete_data)
    save_to_file(sorted_data, "port_vulns_db.json")

if __name__ == "__main__":
    asyncio.run(main())
