name: Monthly Vulnerability Database Update
on:
  schedule:
    # Run on the 1st day of each month at 02:00 UTC
    - cron: '0 2 1 * *'
  workflow_dispatch:  # Allow manual triggering

# Auto cancel previous runs if they were not completed.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Write permissions are required to create branches and PRs
permissions: write-all

jobs:
  update-port-vulns-db:
    runs-on: ubuntu-latest
    outputs:
      outcome: ${{ steps.port_vulns.outcome }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history
      
      - name: Setup Python
        uses: actions/setup-python@v3.1.4
        with:
          python-version: 3.11.3
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Update port vulnerabilities database
        id: port_vulns
        run: |
          echo "Running port vulnerabilities database update..."
          python3 src/cve/build-port-vulns-db.py

      - name: Upload port vulnerability database
        uses: actions/upload-artifact@v4
        with:
          name: port-vulns-db
          path: |
            lanscan-port-vulns-db.json
            lanscan-port-vulns-db.sig
          if-no-files-found: warn

  update-vendor-vulns-db:
    runs-on: ubuntu-latest
    outputs:
      outcome: ${{ steps.vendor_vulns.outcome }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history
      
      - name: Setup Python
        uses: actions/setup-python@v3.1.4
        with:
          python-version: 3.11.3
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Update vendor vulnerabilities database
        id: vendor_vulns
        run: |
          echo "Running vendor vulnerabilities database update..."
          python3 src/cve/build-vendor-vulns-db.py

      - name: Upload vendor vulnerability database
        uses: actions/upload-artifact@v4
        with:
          name: vendor-vulns-db
          path: |
            lanscan-vendor-vulns-db.json
            lanscan-vendor-vulns-db.sig
          if-no-files-found: warn

  process-results:
    needs: [update-port-vulns-db, update-vendor-vulns-db]
    runs-on: ubuntu-latest
    steps:

      - name: Setup EDAMAME Posture
        uses: edamametechnologies/edamame_posture_action@v0
        with:
          edamame_user: ${{ vars.EDAMAME_POSTURE_USER }}
          edamame_domain: ${{ vars.EDAMAME_POSTURE_DOMAIN }}
          edamame_pin: ${{ secrets.EDAMAME_POSTURE_PIN }}
          edamame_id: ${{ github.run_id }}
          checkout: true
          
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history
      
      - name: Download port vulnerability database
        uses: actions/download-artifact@v4
        with:
          name: port-vulns-db
          path: .
      
      - name: Download vendor vulnerability database
        uses: actions/download-artifact@v4
        with:
          name: vendor-vulns-db
          path: .
      
      - name: Setup Python
        uses: actions/setup-python@v3.1.4
        with:
          python-version: 3.11.3
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
      
      - name: Validate vulnerability databases
        id: validate_vulns
        run: |
          echo "Validating port vulnerabilities database..."
          python3 src/publish/validate-models.py lanscan-port-vulns-db.json
          
          echo "Validating vendor vulnerabilities database..."
          python3 src/publish/validate-models.py lanscan-vendor-vulns-db.json

      - name: Configure git
        run: |
          # Configure git
          git config --global user.email "dev@edamame.tech"
          git config --global user.name "EDAMAME Dev"

      - name: Check for changes
        id: check_changes
        run: |
          if [[ $(git status --porcelain | grep -E 'lanscan-(port|vendor)-vulns-db\.(json|sig)') ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected in vulnerability database files"
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected in vulnerability database files"
          fi

      - name: Create Pull Request
        if: |
          needs.update-port-vulns-db.outputs.outcome == 'success' && 
          needs.update-vendor-vulns-db.outputs.outcome == 'success' && 
          steps.check_changes.outputs.changes == 'true'
        uses: peter-evans/create-pull-request@v7
        id: create-pr
        with:
          token: ${{ secrets.DEV_GITHUB_TOKEN }}
          commit-message: "Monthly update of vulnerability databases"
          title: "[Automated] Monthly vulnerability databases update"
          body: |
            ## Automated Monthly Update
            
            This PR contains the monthly update of vulnerability databases.
            
            ### Changes:
            - Updated `lanscan-port-vulns-db.json` and signature
            - Updated `lanscan-vendor-vulns-db.json` and signature
            
            ### Validation Status:
            - Vulnerability databases validation: ${{ steps.validate_vulns.outcome }}
            
            This PR was automatically generated by the monthly update workflow.
          branch: automated/vulns-update-${{ github.run_number }}
          delete-branch: true
          base: main
          labels: |
            automated
            database-update
            vulnerabilities
          assignees: |
            ${{ github.actor }}

      - name: Enable PR auto-merge
        if: steps.create-pr.outputs.pull-request-number
        run: |
          gh pr merge --auto --squash "${{ steps.create-pr.outputs.pull-request-number }}"
        env:
          GH_TOKEN: ${{ secrets.DEV_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Send failure notification
        if: |
          needs.update-port-vulns-db.outputs.outcome == 'failure' || 
          needs.update-vendor-vulns-db.outputs.outcome == 'failure'
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: 'C072J0U9TH7'
          slack-message: |
            GitHub vulnerability database update workflow failed:
            Port vulns: ${{ needs.update-port-vulns-db.outputs.outcome }}
            Vendor vulns: ${{ needs.update-vendor-vulns-db.outputs.outcome }}
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Send success notification
        if: |
          needs.update-port-vulns-db.outputs.outcome == 'success' && 
          needs.update-vendor-vulns-db.outputs.outcome == 'success' && 
          steps.check_changes.outputs.changes == 'true'
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: 'C07127YECN4'
          slack-message: |
            GitHub vulnerability database update workflow successful:
            - Created PR #${{ steps.create-pr.outputs.pull-request-number }} for vulnerability databases update
            - Auto-merge enabled (will merge after checks pass)
            ${{ github.server_url }}/${{ github.repository }}/pull/${{ steps.create-pr.outputs.pull-request-number }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }} 