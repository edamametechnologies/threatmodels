name: Validate and Test Models
on:
 push:
   branches: [ "main", "dev" ]
 pull_request:
   branches: [ "main", "dev" ]
 workflow_dispatch:

# Auto cancel previous runs if they were not completed.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# Write permissions are required to upload the release asset.
permissions: write-all

jobs:
 validate:
   runs-on: ubuntu-latest
   timeout-minutes: 90

   steps:
     - name: Setup EDAMAME Posture
       uses: edamametechnologies/edamame_posture_action@v0
       with:
         edamame_user: ${{ vars.EDAMAME_POSTURE_USER }}
         edamame_domain: ${{ vars.EDAMAME_POSTURE_DOMAIN }}
         edamame_pin: ${{ secrets.EDAMAME_POSTURE_PIN }}
         edamame_id: ${{ github.run_id }}
         checkout: true

     - name: Setup Python
       uses: actions/setup-python@v3.1.4
       with:
         python-version: 3.11.3

     - name: Install dependencies
       run: pip install -r requirements.txt

     - name: Validate models
       id: validate
       run: |
         echo "Validating all threat models"
         set -o pipefail
         if ! python3 src/publish/validate-models.py threatmodel-*.json 2>&1 | tee validate_models_output.txt; then
           echo "Validation Failed!"
           # Use GITHUB_OUTPUT environment file
           echo "error_message<<EOF" >> $GITHUB_OUTPUT
           head -n 10 validate_models_output.txt >> $GITHUB_OUTPUT
           echo "EOF" >> $GITHUB_OUTPUT
           exit 1
         fi

     - name: Validate whitelists
       id: validate_whitelist
       run: |
         echo "Validating all whitelists"
         set -o pipefail
         if ! python3 src/publish/validate-models.py whitelists-db.json 2>&1 | tee validate_whitelist_output.txt; then
           echo "Validation Failed!"
           echo "error_message_whitelist<<EOF" >> $GITHUB_OUTPUT
           head -n 10 validate_whitelist_output.txt >> $GITHUB_OUTPUT
           echo "EOF" >> $GITHUB_OUTPUT
           exit 1
         fi

     - name: Validate blacklists
       id: validate_blacklist
       run: |
         echo "Validating all blacklists"
         set -o pipefail
         if ! python3 src/publish/validate-models.py blacklists-db.json 2>&1 | tee validate_blacklist_output.txt; then
           echo "Validation Failed!"
           echo "error_message_blacklist<<EOF" >> $GITHUB_OUTPUT
           head -n 10 validate_blacklist_output.txt >> $GITHUB_OUTPUT
           echo "EOF" >> $GITHUB_OUTPUT
           exit 1
         fi

     - name: Validate lanscan profiles
       id: validate_lanscan
       run: |
         echo "Validating all lanscan profiles"
         set -o pipefail
         if ! python3 src/publish/validate-models.py lanscan-profiles-db.json 2>&1 | tee validate_lanscan_output.txt; then
           echo "Validation Failed!"
           echo "error_message_lanscan<<EOF" >> $GITHUB_OUTPUT
           head -n 10 validate_lanscan_output.txt >> $GITHUB_OUTPUT
           echo "EOF" >> $GITHUB_OUTPUT
           exit 1
         fi

     - name: Slack alert for validation failure
       if: steps.validate.outcome == 'failure' || steps.validate_whitelist.outcome == 'failure' || steps.validate_blacklist.outcome == 'failure' || steps.validate_lanscan.outcome == 'failure'
       uses: slackapi/slack-github-action@v1.26.0
       with:
         channel-id: 'C072J0U9TH7'
         slack-message: |
           GitHub validation failed on branch ${{ github.ref }} (PR: ${{ github.event.pull_request.number || 'N/A' }}). Details:
           Threat Models: ${{ steps.validate.outcome }} ${{ steps.validate.outcome == 'failure' && format(': {0}', steps.validate.outputs.error_message) || '' }}
           Whitelist: ${{ steps.validate_whitelist.outcome }} ${{ steps.validate_whitelist.outcome == 'failure' && format(': {0}', steps.validate_whitelist.outputs.error_message_whitelist) || '' }}
           Blacklist: ${{ steps.validate_blacklist.outcome }} ${{ steps.validate_blacklist.outcome == 'failure' && format(': {0}', steps.validate_blacklist.outputs.error_message_blacklist) || '' }}
           Lanscan: ${{ steps.validate_lanscan.outcome }} ${{ steps.validate_lanscan.outcome == 'failure' && format(': {0}', steps.validate_lanscan.outputs.error_message_lanscan) || '' }}
       env:
         SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

 test-ubuntu:
   needs: validate
   if: needs.validate.result == 'success'
   runs-on: ubuntu-latest
   timeout-minutes: 90

   outputs:
     report: ${{ steps.read_output.outputs.report }}
   steps:
     - uses: actions/checkout@v4
     - name: Setup Python
       uses: actions/setup-python@v3.1.4
       with:
         python-version: 3.11.3
     - name: Run tests
       run: |
         pip install -r requirements.txt
         python3 src/test/main.py
     - id: read_output
       run: echo "report=$(cat report-results.txt)" >> "$GITHUB_OUTPUT"

 test-windows:
   needs: validate
   if: needs.validate.result == 'success'
   runs-on: windows-latest
   timeout-minutes: 90

   outputs:
     report: ${{ steps.read_output.outputs.report }}
   steps:
     - uses: actions/checkout@v4
     - name: Setup Python
       uses: actions/setup-python@v3.1.4
       with:
         python-version: 3.11.3
     - name: Run tests
       run: |
         pip install -r requirements.txt
         python3 src/test/main.py
     - id: read_output
       shell: pwsh
       run: echo "::set-output name=report::$(cat report-results.txt)"

 test-macos:
   needs: validate
   if: needs.validate.result == 'success'
   runs-on: macos-latest
   timeout-minutes: 90

   outputs:
     report: ${{ steps.read_output.outputs.report }}
   steps:
     - uses: actions/checkout@v4
     - name: Setup Python
       uses: actions/setup-python@v3.1.4
       with:
         python-version: 3.11.3
     - name: Run tests
       run: |
         pip install -r requirements.txt
         python3 src/test/main.py
     - id: read_output
       run: echo "report=$(cat report-results.txt)" >> "$GITHUB_OUTPUT"

 finalize:
   needs: [validate, test-ubuntu, test-windows, test-macos]
   if: always()
   runs-on: ubuntu-latest
   timeout-minutes: 90

   steps:
      - name: Setup EDAMAME Posture
        uses: edamametechnologies/edamame_posture_action@v0
        with:
          edamame_user: ${{ vars.EDAMAME_POSTURE_USER }}
          edamame_domain: ${{ vars.EDAMAME_POSTURE_DOMAIN }}
          edamame_pin: ${{ secrets.EDAMAME_POSTURE_PIN }}
          edamame_id: ${{ github.run_id }}
          checkout: true
          
      - name: Update models hash and date (only on main branch after successful tests)
        if: github.ref == 'refs/heads/main' && needs.validate.result == 'success'
        run: | 
          pip install -r requirements.txt

          # Update hash and date only for models whose tests passed
          if [ "${{ needs.test-ubuntu.result }}" == "success" ]; then
            python3 src/publish/update-models.py threatmodel-Linux.json
          fi
          if [ "${{ needs.test-windows.result }}" == "success" ]; then
            python3 src/publish/update-models.py threatmodel-Windows.json
          fi
          if [ "${{ needs.test-macos.result }}" == "success" ]; then
            python3 src/publish/update-models.py threatmodel-macOS.json
          fi
          
          # Always update iOS and Android (no specific tests for these)
          python3 src/publish/update-models.py threatmodel-iOS.json
          python3 src/publish/update-models.py threatmodel-Android.json
          
          # Update other model types (only if validation passed)
          echo "Updating other model types signatures..."
          python3 src/publish/update-models.py whitelists-db.json
          python3 src/publish/update-models.py blacklists-db.json
          python3 src/publish/update-models.py lanscan-profiles-db.json
          python3 src/publish/update-models.py lanscan-port-vulns-db.json
          python3 src/publish/update-models.py lanscan-vendor-vulns-db.json
          
          git config user.email "dev@edamame.tech"
          git config user.name "EDAMAME Dev"
          git commit -a -m "Updated models hash and date [skip ci]" && \
          git push --set-upstream origin main || \
          echo "No changes to commit"

      - name: Slack final report
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: 'C07127YECN4'
          slack-message: |
            GitHub threat models validation and test results on branch ${{ github.ref }} (PR: ${{ github.event.pull_request.number || 'N/A' }}):
            Validation: ${{ needs.validate.result }}
            Tests Ubuntu: ${{ needs.test-ubuntu.outputs.report }}
            Tests Windows: ${{ needs.test-windows.outputs.report }}
            Tests MacOS: ${{ needs.test-macos.outputs.report }}
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}